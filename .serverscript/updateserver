#!/bin/bash

# Version Checker 
updateserver_Current="1.2.5"

# Check For Server Updates
function updateCheck {

    # Get current ARK-Version from appmanifest
    if [ ! -f $STEAM_APPS_DIR/appmanifest_$GAME_APPID.acf ]; then
        echo -e "$RED ARK-Server is not installed! $RESET"
        echo -e; return
    fi

    currentVersion=`cat $STEAM_APPS_DIR/appmanifest_$GAME_APPID.acf | parseSteamAcf "AppState.buildid"`

    # Get new ARK-Version from Steam Network
    echo -e; echo -e "$YELLOW Requesting new ARK-Server-Version from Steam ... $RESET"
    runSteam 0
    echo -e "$YELLOW Request completed! $RESET"

    # Comparing version numbers
    sleep 0.5; echo -e
    echo -e "$YELLOW Comparing ARK-Server version numbers. $RESET"

    echo -e " Current Version:$CYAN   $currentVersion $RESET"
    echo -e " Latest Version:$CYAN    $newVersion $RESET"

    sleep 0.5; echo -e
    if [ $newVersion -gt $currentVersion ]; then
        echo -e "$RED ARK-Server update found! $RESET"
        sleep 1
    
        if [[ $AutomaticallyInstallUpdates =~ true ]]; then
            echo -e "$GREEN Starting update script. $RESET"
            sleep 1
        
            cd $SCRIPT_DIR
            clear
            updateServer
        
            echo -e; return
        fi
    
        echo -e " Would you like to update the server?"
            echo -e -n "$YELLOW Type: Yes(Y) or No(N): $RESET"
        read input
        echo -e; sleep 0.5s
        if [[ $input =~ Y ]]; then
            echo -e "$GREEN Starting update script. $RESET"
            sleep 1
        
            cd $SCRIPT_DIR
            clear
            updateServer
        
            echo -e; return
        elif [[ $input =~ N ]]; then
            echo -e "$RED Exiting script. $RESET"
            echo -e; return
        else
            echo -e "$ERR You have entered an invalid response. Exiting $RESET"
            echo -e; return
        fi
    else
        echo -e "$GREEN ARK-Server is up to date! $RESET"
    fi

    echo -e; return

}

# Update Server
function updateServer {

    echo -e; echo -e "$YELLOW Preparing to stop the server. $RESET"
    sleep 0.5s
    if screen -list | grep -q $ScreenName; then
        echo -e " Server is running, now stopping."
        screen -S $ScreenName -X quit
        echo -e " Session stopped. Removing PID's"
        PID=`pgrep -f $ArkExecute`
        kill -9 $PID
        sleep 0.5s
        echo -e " PID's removed"
        echo -e; sleep 0.5s
        echo -e "$RED Server stopped $RESET"
    else
        echo -e " Server is offline. Moving on."
    fi

    echo -e; sleep 0.5s

    installSteam

    cd $STEAM_DIR
    echo -e; sleep 0.5s
    echo -e "$YELLOW Now updating the server. This may take a while. $RESET"
    runSteam 1

    cd $GAME_DIR
    echo -e; sleep 0.5s
    echo -e "$YELLOW Making sure old executable is removed. $RESET"
    sleep 0.5s
    if [ -f $ArkExecute ] && [ $ArkExecute != $GAME_EXECUTABLE ]; then
        echo -e "$ERR Old executable found, removing it. $RESET"
        rm $ArkExecute
        sleep 0.5s
        if [ -f $ArkExecute ]; then
            echo -e; echo -e "$ERR Unable to delete old executable. $RESET"
            echo -e " Please remove the file named$YELLOW $ArkExecute$RESET."
        else
            echo -e " Old executable removed. Moving on."
        fi
    else
        echo -e " Old executable not found."
    fi

    echo -e; sleep 0.5s
    echo -e "$GREEN Server update complete. $RESET"
    echo -e; sleep 0.5s
    echo -e "$YELLOW Please restart the script to start the server. $RESET"
    return

}
