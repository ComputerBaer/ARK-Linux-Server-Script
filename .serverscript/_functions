#!/bin/bash

# Version Checker 
functionVer_Current="1.1.5"

shopt -s nocasematch

# Global Variables
SCRIPT_DIR=$(dirname "$(readlink -fn "$0")")
BASE_DIR=$(dirname $SCRIPT_DIR)

GAME_APPID=376030
GAME_DIR="$BASE_DIR/ShooterGame/Binaries/Linux"
GAME_EXECUTABLE="ShooterGameServer"

STEAM_DIR="$BASE_DIR/steamcmd"
STEAM_APPS_DIR="$BASE_DIR/steamapps"
STEAM_APPCHACHE="$HOME/Steam/appcache"


function installSteam
{
    cd $BASE_DIR
    
    # Check Steam Directory
    sleep 0.5s; echo -e
    echo -e "$YELLOW Locating SteamCMD directory. $RESET"
    sleep 0.5s
    if [ -d $STEAM_DIR ]; then
        echo -e " SteamCMD directory found."
        sleep 0.5s; echo -e
        return 0
    fi
    echo -e " $ERR Couldn't find the SteamCMD directory, installing now."
    sleep 0.5s;
    
    # Create Steam Directory
    echo -e; echo -e "$YELLOW Creating the SteamCMD directory. $RESET"
    sleep 0.5s
    mkdir $STEAM_DIR
    cd $STEAM_DIR
    echo -e " Directory created, moving on."
    sleep 0.5s
    
    # Install Steam Dependencies
    echo -e; echo -e "$YELLOW Installing SteamCMD dependencies. $RESET"
    sleep 0.5s
    sudo apt-get install lib32gcc1
    echo -e " Dependencies installed."
    sleep 0.5s
    
    # Install Steam
    echo -e; echo -e "$YELLOW Installing SteamCMD. $RESET"
    #curl https://steamcdn-a.akamaihd.net/client/installer/steamcmd_linux.tar.gz -o steamcmd_linux.tar.gz -#
    echo -ne " Downloading"
    curl https://steamcdn-a.akamaihd.net/client/installer/steamcmd_linux.tar.gz -o steamcmd_linux.tar.gz -s &
    waitBackgroundTask $!
    #tar -xvzf steamcmd_linux.tar.gz
    echo -ne " Extracting"
    tar -xzf steamcmd_linux.tar.gz &
    waitBackgroundTask $!
    rm steamcmd_linux.tar.gz
    echo -e "$GREEN SteamCMD installed."
    sleep 0.5s; echo -e
    
    cd $SCRIPT_DIR
}

# runSteam 0 - Version Check
# runSteam 1 - Update + Version Check
function runSteam
{
    cd $BASE_DIR
    
    # Check Steam Installation
    if [ ! -d $STEAM_DIR ]; then
        installSteam
    fi
    cd $STEAM_DIR
    
    # Clear Steam AppCache
    if [ -d $STEAM_APPCHACHE ]; then
        rm -r $STEAM_APPCHACHE
    fi
    
    # Run Steam
    if [ $1 == 0 ]; then
        ./steamcmd.sh +login anonymous +app_info_print $GAME_APPID +quit | parseSteamAcf "${GAME_APPID}.depots.branches.public.buildid" > ark_tmp_version &
    elif [ $1 == 1 ]; then
        ./steamcmd.sh +login anonymous +force_install_dir ../ +app_update $GAME_APPID validate +quit > /dev/null &
    fi
    waitBackgroundTask $!
    
    # Version Check
    if [ -f ark_tmp_version ]; then
        newVersion=$(cat ark_tmp_version)
        rm ark_tmp_version
    fi
    
    cd $SCRIPT_DIR
}

function waitBackgroundTask
{
    PROC_ID=$1
    
    echo -ne " "
    while :; do
        if kill -0 $PROC_ID 2>/dev/null; then
            echo -ne "."
        else
            break
        fi
        sleep 0.5s
    done
    
    echo -e
}

function parseSteamAcf
{
    local path=$1
    if [ -z $path ]; then
        return
    fi
    
    local splitPos=`expr index "$path" .`
    local newPath=""
    local searchName="\"$path\""
    if [ $splitPos -gt 0 ]; then
        newPath=${path:$splitPos}
        searchName=${path:0:$splitPos-1}
        searchName="\"$searchName\""
    fi
    
    local count=0
    while read name val; do
        if [ -z $name ]; then
            continue
        fi
        
        if [ $name == $searchName ] && [ $count -lt 2 ]; then
            if [ -z $newPath ]; then
                local length=${#val}
                echo ${val:1:$length-2}
            else
                parseSteamAcf $newPath
            fi
            return
        elif [ $name == "{" ]; then
            count=$((count+1))
        elif [ $name == "}" ]; then
            count=$((count-1))
            if [ $count -eq 0 ]; then
                break
            fi
        fi
    done
    
    echo "NOT FOUND! ERROR?"
}

# checkInteger <num> <default>
function checkInteger
{
    local num=$1
    local default=$2
    local regex='^[0-9]+$' # Positive Numbers
    #local regex='^-?[0-9]+$' # Positive and negative Numbers
    
    if [[ $num =~ $regex ]]; then
        # Is valid Integer
        echo $num
    else
        # Is invalid Integer
        echo $default
    fi
}

# checkDouble <num> <default>
function checkDouble
{
    local num=$1
    local default=$2
    local regex='^[0-9]+([.][0-9]+)?$' # Positive Numbers
    #local regex='^-?[0-9]+([.][0-9]+)?$' # Positive and negative Numbers
    
    if [[ $num =~ $regex ]]; then
        # Is valid Double
        echo $num
    else
        # Is invalid Double
        echo $default
    fi
}

# checkBoolean <bool> <default>
function checkBoolean
{
    local bool=$1
    local default=$2
    
    if [[ $bool =~ true ]] || [[ $bool =~ false ]]; then
        # Is valid Boolean
        echo ${bool,,}
    else
        # Is invalid Boolean
        echo ${default,,}
    fi
}

# invertBoolean <bool>
function invertBoolean
{
    local bool=$1
    
    if [[ $bool =~ true ]]; then
        echo "false"
    elif [[ $bool =~ false ]]; then
        echo "true"
    else
        # Is invalid Boolean, return Input
        echo $bool
    fi
}

function readVersions
{
    echo -e "$YELLOW arhserver.sh:$RESET    $arkserver"
    echo -e "$YELLOW backupserver:$RESET    $backupserver"
    echo -e "$YELLOW installserver:$RESET   $installserver"
    echo -e "$YELLOW serverstatus:$RESET    $serverstatus"
    echo -e "$YELLOW startserver:$RESET     $startserver"
    echo -e "$YELLOW stopserver:$RESET      $stopserver"
    echo -e "$YELLOW updateserver:$RESET    $updateserver"
    echo -e "$YELLOW viewserver:$RESET      $viewserver"
    echo -e "$YELLOW liveConfig:$RESET      $liveConfig"
    echo -e "$YELLOW parameters:$RESET      $parameters"
    echo -e "$YELLOW functions:$RESET       $functions"
    echo -e "$YELLOW pushfile:$RESET        $pushfile"
    echo -e "$YELLOW changelog:$RESET       $changelog"
}
